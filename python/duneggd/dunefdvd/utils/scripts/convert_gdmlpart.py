from lxml import objectify
import sys

gdmlpartfile = sys.argv[1]
materials = sys.argv[2].lower() == 'true'
definitions = not materials

tree = objectify.parse(gdmlpartfile)

# GeGeDe structures for materials in DUNE Geometries
def convert_materials(tree):
    mat = tree.getroot()
    if mat.tag != "materials":
        print("Didn't find materials root tag, exiting")
        sys.exit(1)

    geom_elements = []
    ncomp = 0
    for e in mat.element:
        name = e.attrib["name"]
        formula = e.attrib["formula"]
        Z = e.attrib["Z"]
        var = 'e_'+formula.lower()
        A = e.atom.attrib["value"]+"g/mole"
        ggd_string = '%s = geom.matter.Element(\"%s\", \"%s\", %s, \"%s\")\n' % \
                        (var, name, formula, Z, A)
        if ncomp == len(mat.element) - 1:
            ggd_string += '\n\n'
        ncomp += 1
        geom_elements.append(ggd_string)

    for m in mat.material:
        name = m.attrib["name"]
        D = m.D.attrib["value"]+"g/cc"
        var = 'm_'+name.lower()

        if hasattr(m, "fraction"):
            ggd_string = '%s = geom.matter.Mixture(\"%s\", density = \"%s\",\n\t\t\t\t\t\tcomponents = (' % (var, name, D)
            ncomp = 0
            for frac in m.fraction:
                n = frac.attrib["n"]
                ref = frac.attrib["ref"]

                if ncomp == 0:
                    ggd_string += '(\"%s\", %s)' % (ref, n)
                else:
                    ggd_string += '\n\t\t\t\t\t\t\t\t\t  (\"%s\", %s)' % (ref, n)
                if ncomp == 0 or ncomp < len(m.fraction) - 1:
                    ggd_string += ','
                ncomp += 1
            ggd_string += '))\n\n'
            geom_elements.append(ggd_string)

        if hasattr(m, "composite"):
            ggd_string = '%s = geom.matter.Molecule(\"%s\", density = \"%s\",\n\t\t\t\t\t\telements = (' % (var, name, D)
            ncomp = 0
            for comp in m.composite:
                n = comp.attrib["n"]
                ref = comp.attrib["ref"]

                if ncomp == 0:
                    ggd_string += '(\"%s\", %s)' % (ref, n)
                else:
                    ggd_string += '\n\t\t\t\t\t\t\t\t\t(\"%s\", %s)' % (ref, n)
                if ncomp == 0 or ncomp < len(m.composite) - 1:
                    ggd_string += ','
                ncomp += 1
            ggd_string += '))\n\n'
            geom_elements.append(ggd_string)

    # now write it all out
    with open('../materials.py', 'w') as fmat:
        fmat.write('''\
# auto-generated by scripts/convert_gdmlpart.py
def construct_materials(geom):\n\n''')
        for el in geom_elements:
            fmat.write('''\
    '''+el)

# GeGeDe structures for various postional and rotational defintions in DUNE geometries
def convert_definitions(tree):
    gdml = tree.getroot()
    if gdml.tag != "gdml":
        print("Didn't find gdml root tag, exiting")
        sys.exit(1)
    define = gdml.define

    geom_elements = []
    for p in define.position:
        name = p.attrib["name"]
        unit = p.attrib["unit"]
        x = p.attrib["x"]+unit
        y = p.attrib["y"]+unit
        z = p.attrib["z"]+unit
        ggd_string = '%s = geom.structure.Position(\"%s\", x=\"%s\", y=\"%s\", z=\"%s\")\n' % \
                      (name, name, x, y, z)
        geom_elements.append(ggd_string)

    for r in define.rotation:
        name = r.attrib["name"]
        unit = r.attrib["unit"]
        x = r.attrib["x"]+unit
        y = r.attrib["y"]+unit
        z = r.attrib["z"]+unit
        ggd_string = '%s = geom.structure.Rotation(\"%s\", x=\"%s\", y=\"%s\", z=\"%s\")\n' % \
                      (name, name, x, y, z)
        geom_elements.append(ggd_string)

    with open('../definitions.py', 'w') as fdef:
        fdef.write('''\
# auto-generated by scripts/convert_gdmlpart.py
def construct_definitions(geom):\n\n''')
        for el in geom_elements:
            fdef.write('''\
    '''+el)

# do the conversion from existing gdml parts files (generated using perl scripts)
if materials:
    convert_materials(tree)
else:
    convert_definitions(tree)
